# -*- coding: utf-8 -*-
"""Tugas Pemrograman AI 1 - Kelompok 17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1g6yJoDNpt6y3TY7yMv9bVVhwnKUwbQIZ
"""

import random
# from matplotlib import pyplot as plt

"""KROMOSOM"""

def generate_chromosome(alel):
  chromosome = []
  for i in range(alel):
    chromosome.append(random.randint(0,1))
  return chromosome

"""POPULASI"""

def generate_population(n):
  population = []
  for i in range(n):
    population.append(generate_chromosome(alel))
  return population

"""DECODE KROMOSOM"""

def decode(chromosome):
  gen_x = chromosome[0:4]
  gen_y = chromosome[4:8]
  sum_gen = 2**(-1) + 2**(-2) + 2**(-3) + 2**(-4)

  x = x_min + ( ((x_max - x_min) / (sum_gen)) * ((gen_x[0] * 2**-1) + (gen_x[1] * 2**-2) + (gen_x[2] * 2**-3) + (gen_x[3] * 2**-4) ))
  y = y_min + ( ((y_max - y_min) / (sum_gen)) * ((gen_y[0] * 2**-1) + (gen_y[1] * 2**-2) + (gen_y[2] * 2**-3) + (gen_y[3] * 2**-4) ))

  return x,y

"""MINIMASI FUNGSI"""

def func(x,y):
  e = 2.718281828459045
  a = 0.01
  h = ((e**(x*1j)).imag + (e**(y*1j)).real)**2 / (x**2) + (y**2)
  return 1 / (h + a)

"""NILAI FITNESS"""

def fitness_value(population):
  fitness = []
  for i in population:
    x,y = decode(i)
    fitness.append(func(x,y))
  return fitness

"""PEMILIHAN ORANGTUA """

def tournament_selection(population, fitness, n, k):
  nomine = random.sample(range(n), k);
  winner = None

  for i in nomine:
    print(population[i], ":", fitness[i])
    if (winner == None) or (fitness[i] > fitness[winner]):
      winner = i
  return population[winner]

"""CROSSOVER & REKOMBINASI"""

def crossover(p1, p2, pC):
  if random.random() <= pC:
    point = random.randint(1, alel - 1)
    print("Titik Potong :", point)
    child1 = (p1[0:point] + p2[point:alel])
    child2 = (p2[0:point] + p1[point:alel])
    return child1,child2
  return p1,p2

"""MUTASI"""

def mutation(chromosome, pM):
  for i in range(alel):
    if random.random() <= pM:
      if chromosome[i] == 0:
        chromosome[i] = 1
      else:
        chromosome[i] = 0
  return chromosome

"""ELITISME"""

def elitism(population, fitness):
  max = 2
  elite = []

  bestChromosome = [(fitness[i], population[i]) for i in range(len(population))]
  grade = sorted(bestChromosome, key=lambda x: x[0], reverse=True)

  for i in range(max):
    elite.append(grade[i][1])
  return elite

"""PERGANTIAN GENERASI"""

def generational_replacement(n, maxGen, pC, pM, k):
  population = generate_population(n)
  for gen in range(maxGen):
    print("Gen", gen+1)
    fitness = fitness_value(population)

    for i in range(len(population)):
      print("Kromosom", i+1, ":",  population[i], "   |  Nilai Fitness:", fitness[i])
    print("==============================================")
    newPopulation = elitism(population, fitness)

    # Untuk Grafik
    fit.append(fitness_value(newPopulation))
    
    print("Hasil Elitisme")
    for elit in newPopulation:
      x,y = decode(elit)
      print(elit, ":", func(x,y))
    print("==============================================")
    print("Kromosom Ditambahkan :", newPopulation)
    print("Jumlah Populasi Baru :", len(newPopulation))
    print("==============================================")

    while len(newPopulation) < n:
      print("Memulai Tournament Selection")
      parent1 = tournament_selection(population, fitness, n, k)
      print("Parent 1:", parent1)
      parent2 = tournament_selection(population, fitness, n, k)
      while parent1 == parent2:
        print("Parent 2:", parent2)
        print("Parent Sama, Melakukan Pemilihan Parent Baru")
        parent2 = tournament_selection(population, fitness, n, k)
      print("Parent 2:", parent2)
      print("==============================================")
      print("Memulai Crossover Parent")
      child1, child2 = crossover(parent1, parent2, pC) 
      print("Child 1:", child1)
      print("Child 2:", child2)
      print("==============================================")
      print("Memulai Mutasi Child")
      child1 = mutation(child1, pM)
      child2 = mutation(child2, pM)
      print("Hasil Mutasi Child 1:" , child1)
      print("Hasil Mutasi Child 2:", child2)
      print("==============================================")
      newPopulation.extend([child1, child2])
      print("Kromosom Ditambahkan :", child1, child2)
      print("Jumlah Populasi Baru :", len(newPopulation))
      print("==============================================")
    population = newPopulation
  
  highest_fitness = max(fitness)
  best_chromosome = fitness.index(highest_fitness)
  return population[best_chromosome]

"""MAIN CODE"""

x_min = -5
x_max = 5
y_min = -5
y_max = 5

population_size = 50
crossover_probability = 0.7
mutation_probability = 0.05
alel = 8
tournament_size = 5
max_generation = 50
fit = []

best = generational_replacement(population_size, max_generation, crossover_probability, mutation_probability, tournament_size)
x,y = decode(best)
fitness_value = func(x,y)
print("==================== SOLUSI TERBAIK ====================")
print("KROMOSOM :", best)
print("X :", x)
print("Y :", y)
print("NILAI FITNESS :", fitness_value)

"""GRAFIK"""

# x = range(1, max_generation +1)
# y = fit

# plt.title("Pertumbuhan Nilai Fitness")
# plt.xlabel("Generasi")
# plt.ylabel("Fitness Terbaik")

# plt.plot(x,y)
# plt.show()